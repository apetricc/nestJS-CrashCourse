NEST JS ENTITIES:
Contoller --> creating endpoints
Modules --> managing dependencies/instatiation etc
Services --> business logic
guards -->
data transfer objects -->

// then we need to export this class (by saying "export" in front of the class declaration) b/c it will be used in the app.module.ts file
// so we have to export it so it can access it obviously;
// then we refresh our localhost:3000 and see that we should get back that empty array "[]" in our browser;
// @29:09 of video;


 *   so at this point the request we are making in our browser is a GET request to  http://localhost:3000/
 *    our app sees the GET request and runs our function, returning whatever we tell it to
 *   we want it to return the stuff when we go to http://localhost:3000/report/income
 *   the controller simply goes to "/" by default, so we just need to append the additional path in the decorator;
 *   we can put in the "@Controller()" decorator, or the "@Get()" decorator.  We'll put in the @Get so it is more specific(?)
 *   it will look like this: @Get('report/income')
 *  why to put it in the @Get instead of the @Controller?
 * Whatever we put in the @Controller gets added to the base path.  So if we have @Controller('hi') & @Get('hello')
 *  we would have to say localhost:3000/hi/hello to get to our GET request function
 *   so if we want a path to be appended to everything in our controller, we put it in the @Controller() decorator,
 *   if we want an endpoint for a certain method, we'd put it in the @Get() decorator for a specific method/function;
 *
 *--------------------------------
  adding a dynamic ID to our path/decorator-->
  we need to add an ID to one of our @Get() decorators so we have a path like this:
  localhost:3000/report/income/asdfhhjj
  we could say @Get('asdfhhjj')  and that would work, but we want it to be dynamic.
  So what we do is we just put a colon in front and give that variable a name that makes sense, like ':id'
  Then we can put anything in there and it will call this method

  We can do the same thing in our 'base path' in the @Controller('report/:type')
  SO then we should be able to make requests to both localhost:3000/report/income AND localhost:3000/report/expense...
   or localhost:3000/report/ANYTHING?! But we will add error handling to fix that later, thankfully!
 ----------------------

 Now we want to also add the paths for POST, PUT, & DELETE.  They will need their own decorators, 3 guesses what those are.

 Then we created a collection in Postman to test our app b/c we can only do GET requests from our browser & we need a tool
 like postman to do the other operations. We created that collection, and have covered the basics of what our
 controller classes will be doing (with this app and others). Our functions aren't really doing anything yet though...
 SO--Next we will add the actual functionality to our app!!
 @ 50:11 of video
 To do this we need some kind of DB to store our values/reports

@1:33---  we have all our endpoints and the logic;
WE also have a few problems-- we have all our logic in the controller, which should really only be
creating the endpoints, not bogged down by all this business logic;
We also have no form of data validation so people could supply gargabe data;

So to resolve our contoller having all the logic, we will move the logic to a 'service' file--
app.service.ts in this case;

@1.42 -- we need to instantiate our Service class, and use modules to manage that stuff in our directory!

@1.46 -- at this point, it seems a little uneccesary to have the module and service etc, but when we have a real
project there can be MANY controllers, and using the modules really helps manage all those files;

Now @1.46 we want to do the same for our other methods;

@1.53.07    I could've sworn he had type in the delete method, but it's gone as we migrate it to app.service.ts...
I guess I was wrong, we don't need the type to delete something, makes sense if we have the UUID;

I had put it in to print out `Deleted ${INCOME/EXPENSE} report with id ${UUID}`

@1.53.41 -- discussing why we want to put our logic in the app.service.ts file  -- it's so we can import it later as needed!

he 'accidentally' had his delete function calling itself in the controller:
return this.deleteReport(id);
instead of:
return this.appService.deleteReport(id);
which is a recursive call and led to stack overflow;

@1.59.30 -- going into validation of incoming properties;
-------------------------
Things to validate:
validate that the id is a uuid;
validate that the body is correct;
validate that the type is either income | expense;

Why validate the id?  If we don't get a uuid coming in we don't want to waste time/resources
going further;
Why validate the amount/source? --So users can't input random values or arrays etc;
Why validate the type as income/expense? --same reason, so users can't put in random stuff/objects;

the ID__________________________________
incoming requests should look like this:
report/income/abfb8b2c-da3c-40d9-bff2-8c63a41a1279

& not like these examples:
report/income/abc1234124    or      report/income/banana

How do we do this?
In Nest there are some entities to do this;
We can use 'Pipes'
"ParseIntPipe"  to start with; We will add it to the getReportById() method as
a parameter with the incoming id like so:
@Param('id', ParseIntPipe) id: string

if we pass this request:
/report/income/7
the 'ParseIntPipe' will take a number passed in a request and convert it to a number type;

this is great, and there are other Pipes to parse other types, what we want is to parse for a
UUID though; so we need to use a 'ParseUUIDPipe'
therefore if we pass
/report/income/7
it will fail ('expected uuid' error), if we pass:
/report/income/abfb8b2c-da3c-40d9-bff2-8c63a41a1279
it will work (only returning data if we have that specific uuid in our data set though)

now we are validating the incoming UUIDs!


@2.07.15
validate the 'type' param__________________________
So how can we validate the 'type' the comes in with request params;
we need to use the enum pipe;
'ParseEnumPipe'

it's not so easy as just adding it next to all the incoming 'type' params though;
we need to instantiate it so we can pass in our enum for it to use as reference of
what is allowable;

@Param('type', new ParseEnumPipe(ReportType))

so we just add that everywhere we take in the @Param('type')

@2.09.20
validate the body______________________________________
since the 'body' has stuff in it (amount, source), we can't just use a Pipe to parse/validate it;
We need to ensure that the amount is a number, and the source is a string;

We need to use a 'DTO'   transform and validate the body and outgoing response;
We need to create this manually--> create new dir in src folder,
create file "report.dto.ts"

INSTALL PACKAGES FOR DTOS--
we need to install some stuff with npm to do all this: class-validator, & class-transformer;

"npm install class-validator class-transformer"

what is a DTO ...?  a "data transfer object"

To validate the stuff we want in the body, we define a class, and export it;
Then we import it into our controller, like we did with the enum and other stuff;

Then where we used in the CreateReport() method, we replace the stuff we had for body
//we had:
createReport(@Body()
{ amount, source }: { amount: number; source: string; },
@Param('type', new ParseEnumPipe(ReportType)) type: string) {

//change to:
createReport(@Body()
{ amount, source }: CreateReportDto,
@Param('type', new ParseEnumPipe(ReportType)) type: string) {

This doesn't do any validation though, just the typing part;

To get the validation in, we need to use some decorators from the
class-validator library  which we need to import to our dto file/class

for 'amount' we can try the @IsNumber decorator to ensure that it's a number,
but we also need to ensure that it's a positive number as well...
and there's a decorator for that as well:
@IsPositive

We also added the @IsString() and @IsNotEmpty decorators for
source: string;
This should provide validation right?
Apparently not, we can create a new report and provide whatever for the source...
@2.14.26

To do this we need to go to the main.ts file, which is where the whole application
is getting booted up;
NestFactory generates a new Nest application

we want to tell it to use the global pipes before listening on port 3000;
here we can change the port to listen on as well, like to port 665 for example;

@2.16.30  just added the app.useGlobalPipes(new ValidationPipe()); to main.ts which
lets us do validation on the source and amount on createReport() in controller;

moving on to the validation for the 'updateReport()' method;
We want the source and the amount to be optional to update here;
So we'll need a new DTO where we can make these optional, I think we use the "?source" or is it "source?" ?
This works for objects, but for this DTO validation/validator we need to use another decorator: @IsOptional()
but we can use the "?" on a new interface for UpdateReport, and use that as the type for our updateReport method in
the app service;

@2.20.50  we have the validation and the new updateReport DTO, which works great, but we can still add
random key value pairs via the updatereport() method, which is not good.  So how to prevent it from accepting
other stuff, aka reject any other fields that aren't defined in our DTO???

in order to do this, we have to go to the main.ts file and in the ValidationPipe()  we have to pass in
some options/params;  We want to use a param called "whitelist" and set it to 'true'
this will cause our DTO/validationPipe to completely block anything else that isn't defined in our DTO!
Exactly what we want here.
app.useGlobalPipes(new ValidationPipe());  ---> app.useGlobalPipes(new ValidationPipe({whitelist:true}));
also of note, we can have a trailing comma and it doesn't care here:
app.useGlobalPipes(new ValidationPipe({whitelist:true,}));
Also interesting, it doesn't error if you provide weird new key values, it just ignores them.

@2.23.33 -- brand new section!  How to manipulate outgoing responses?
in our local DB (which is just an array here, simple), our keys are using 'snake case' as in 'created_at' etc.

What if we wanted to convert the snake_case into camelCase?

We could go into our app.service file and when we push the new report to the DB, we could
just take in each field and rename them, using "createdAt" instead of "created_at" (which we defined in our createReport() method)
but that is a terrible solution and would take a lot of extra work.
Instead we can accomplish our goal of snake_case --> camelCase using 'DTOs' and 'intercepters'

So we'll create a DTO for the outgoing response;
So far we used a DTO for the request body;
We can also make a DTO for the response!
@2.26.49

let's go ahead and create the DTO for the response.
We'll be applying this DTO to basically all the route handlers that we have defined;

So we made our ReportReponseDto and added the @Exclude() decorator above "updated_at" prop (from "class-transformer")
Then we set the return type of our methods in controller to this type ('ReportReponseDto')
If we do this then we have to also update the return type in the app.service file as well;

@2.31.40  We added the 'ReportReponseDto' as the return type for all our methods in the controller and service files,
and we used the @Exclude decorator to omit the 'updated_at' property, so we shouldn't see that property any more right??
No. It's a little more complicated than that;
We specified the return type, but 'ReportReponseDto' is a class that needs to be instantiated;
So I'm guessing we need to create a 'ReportReponseDto' object, and then actually return an instance of that object;
----
Our first adventure using this in our response is adding it to the getReportById() method in app.service;
instead of just returning the report we find, we create a 'const' called report, and then pass that into our
'ReportReponseDto'... except we didn't set up our DTO to accept input yet, so we have to do that too.
Once it can accept input, our DTO can that get to transforming the objects that are coming in to it;
To get it to accept input, we have to add a constructor to this DTO class of course;
And in our constructor, we will use type Partial<ReportReponseDto>

We add this new ReportReponseDto and pass in what we were returning before,
like:
return new ReportReponseDto(report);

This is just step one though; we need to tell NestJS that it can go ahead and transform our objects

@2.37.00  Step 2-- we need to tell NestJS that it can transform our objects in main.ts
We add "transform: true" in the app.useGlobalPipes
and also transformOptions: {
        enableImplicitConversion: true,

This STILL doesn't accomplish our goal of just having a proper responseDTO where we can omit the 'updated_at' prop...

@2.37.50  --> we need to do something in the app.module.ts file;
updating:
"providers: [AppService],"

to:
providers: [AppService, {
    provide: APP_INTERCEPTOR,
    useClass: ClassSerializerInterceptor
}],


which we don't understand yet, but this makes it work!  We will come back to what's happening here,
b/c the APP_INTERCEPTOR is another ENTITY in nestJS that we want to understand;

Meantime we will pivot to converting 'created_at' to 'createdAt' in our DTO file;
Before we used @Exclude, and now we want to use @Expose decorator;

We @Expose a new property with camelCase-- 'createdAt' and pass in the created_at property with this.created_at
this makes a new property/field in our response.
Then we exclude the original 'created_at' basically.

@2.41.36 -- circling back to APP_INTERCEPTOR ---

what is an interceptor in nestJS ??


 __   Interceptor          __
|  |    ------>           |  |
|  |  (request^)          |  |
|  |                      |  |
|  |    (response)        |  |
|  |    <----------       |  |
|__|    Interceptor       |__|

client                    nestAPI (server)


The interceptor acts like a man in the middle, it can intercept the requests before it hits the server,
and it can intercept the response before it gets to the client;

the code again:
"provide: APP_INTERCEPTOR,
useClass: ClassSerializerInterceptor"

So our code in AppService is saying 'we want to provide an app interceptor'
so for every request to our service, we want to intercept that request with the class serializer interceptor,
(which a 'seriealizer' is just to modify data)  also, this is a built in interceptor, it is possible to write your
own custom interceptors as well...

Our setup is intercepting the response to the client, checking our DTOs, and somehow modifying the response
that goes to the client.

@2.45--   we will build our own custom interceptor just for learning purposes, even though we have a great
built in interceptor that we'll actually keep using, but doing this will help learn more about interceptors;


make a new file ./src/custom.interceptor.ts
an interceptor is an entity (inside nestJS).  Entities are classes in nestJS;
∴ it is made by a class, well, it IS a class, and then we can use that class;


class CustomInterceptor implements NestInterceptor {
    //we get an error saying we must have property "intercept" to impletment 'NestInterceptor'
    // but I think that means we need a method called intercept
    intercept(
        // the context tells us more info about the incoming request, maybe the query params or whatever
        // the handler is the endpoint or the next interceptor that we want to give it to,
        // that we want to hand off our request to after we're done intercepting it here,
        // in the diagram the handler would be the right box/endpoint/handler
        context, handler
    )

@2.56.24  his custom interceptor is working but mine is not, maybe I didn't import correctly?
Okay, it only is working on 'createReport' for some reason I don't know

We won't delete our custom interceptor, but we will change our app.module.ts import to use the
ClassSerializerInterceptor instead b/c it's already doing everything we want;
so in app.module.ts we had:
import { CustomInterceptor } from "./custom.interceptor"

providers: [AppService, {
    provide: APP_INTERCEPTOR,
    // useClass: ClassSerializerInterceptor
    useClass: CustomInterceptor,
  }],

and we're changing it back to use ClassSerializerInterceptor
@2.57   we're basically done at this point;

@2.57.39  LAST THING-- we need to talk about how we're structuring our files/directories;

@2.58:
before we get to that (in classic Laith style), we are going to add another endpoint
which will calculate and display a summary--basically our total income and expenses

/summary

how do we add a new endpoint with a whole new path?
We already added /report as the base path to everthing...

The problem also lies in the fact that we should never have had all that logic
in our controller for the report endpoints.
So we should
1. make a new controller to handle "/summary"
2. make another file to hold our "/report" logic
3. tie it all together somehow maybe with another file, or maybe not idk

We make a new module for /summary using the nest cli -->

nest g module summary

nest (for nest CLI), g (for 'generate'), module (what we're generating), summary (what we want it called)

--> this cmd created a new folder in our ./src/ dir, and it updated the app.module.ts file so we can use it;
@3.00 - 3.01  next we generate a controller, and we'll generate a service as well for /summary
again with the nest CLI:
nest g controller summary

This created a controller, and also a .spec file, which is for testing, which he says he talks about
in the next project, so maybe that is worth doing;

it also updated teh summary.module; it says there's now a controller called "SummaryController" :
@Module({
  controllers: [SummaryController]
})

and it also got imported to app.module, so it will know about the SummaryController;
last thing we need is a service-->

drew ==>nest g controller service
CREATE src/service/service.controller.spec.ts (499 bytes)
CREATE src/service/service.controller.ts (103 bytes)
UPDATE src/app.module.ts (690 bytes)


This seems to be a separate controller service to manage our other controllers, and a spec file;

@3.02.20  now we are going to use the nestCLI to make a controller and stuff for the reports;
(terminal log):
drew ==>nest g module report
CREATE src/report/report.module.ts (83 bytes)
UPDATE src/app.module.ts (759 bytes)
drew ==>nest g controller report
CREATE src/report/report.controller.spec.ts (492 bytes)
CREATE src/report/report.controller.ts (101 bytes)
UPDATE src/report/report.module.ts (174 bytes)
drew ==>nest g service report
CREATE src/report/report.service.spec.ts (460 bytes)
CREATE src/report/report.service.ts (90 bytes)
UPDATE src/report/report.module.ts (254 bytes)
drew ==>

@3.03.10  --> begin extracting the code into our generated folders/files;
We actually made a mistake, so we need to delete the 'service' folder,
and remove the imports from app.module.ts;

copy everything from app.service.ts and replace report.service.ts with that code;
update dtos import by saying either
import { ReportResponseDto } from "src/dtos/report.dto";  OR
import { ReportResponseDto } from "../dtos/report.dto";   which is the relative path
We also update the name of the export class from AppService --> ReportService
and we can empty out our app.service.ts class, and just keep it as an empty class for now;
@3.05.15
now we do the same for the app.controller.ts file into report.controller.ts
update the import from { AppService }  to { ReportService } from "./report.service";
and the dto import path;
and update the constructor to construct a new "ReportService" as we're calling it,
as well as the controller to be ReportService as well:
@Controller('report/:type')
export class ReportController {

  // we can export the constructor..?
  constructor(
    private readonly appService: ReportService
  ){}


we removed / commented the logic from app.controller.ts and left an empty class there;
we tested to make sure everything is still working as expected, which it is;
Now everything is in separate folders and that is an improvement on our old file structure;


@3.09  now we will start working on summary controller

add @Get endpoint for getSummary()
generate a new service for summary  --> nest g service summary

one way to let summary service see ReportService is to: 
import { ReportService } from 'src/report/report.service'   --> & add ReportService to 'providers'
but we should instead import the whole module, that imports everything from module 'report'
to do this we add the property-- "imports: [ReportModule]"  to the @Module arguments, and 
we have to go back to report.module.ts and explicitly tell it what to export from there also
we do that by adding an 'exports' property to the @Module
@Module({
  exports: [ReportService, otherServiceWeWantToExportFromReportModule'sName]
})







