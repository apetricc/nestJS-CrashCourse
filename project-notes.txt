NEST JS ENTITIES:
Contoller --> creating endpoints
Modules --> managing dependencies/instatiation etc
Services --> business logic
guards -->
data transfer objects -->

// then we need to export this class (by saying "export" in front of the class declaration) b/c it will be used in the app.module.ts file
// so we have to export it so it can access it obviously;
// then we refresh our localhost:3000 and see that we should get back that empty array "[]" in our browser;
// @29:09 of video;


 *   so at this point the request we are making in our browser is a GET request to  http://localhost:3000/
 *    our app sees the GET request and runs our function, returning whatever we tell it to
 *   we want it to return the stuff when we go to http://localhost:3000/report/income
 *   the controller simply goes to "/" by default, so we just need to append the additional path in the decorator;
 *   we can put in the "@Controller()" decorator, or the "@Get()" decorator.  We'll put in the @Get so it is more specific(?)
 *   it will look like this: @Get('report/income')
 *  why to put it in the @Get instead of the @Controller?
 * Whatever we put in the @Controller gets added to the base path.  So if we have @Controller('hi') & @Get('hello')
 *  we would have to say localhost:3000/hi/hello to get to our GET request function
 *   so if we want a path to be appended to everything in our controller, we put it in the @Controller() decorator,
 *   if we want an endpoint for a certain method, we'd put it in the @Get() decorator for a specific method/function;
 *
 *--------------------------------
  adding a dynamic ID to our path/decorator-->
  we need to add an ID to one of our @Get() decorators so we have a path like this:
  localhost:3000/report/income/asdfhhjj
  we could say @Get('asdfhhjj')  and that would work, but we want it to be dynamic.
  So what we do is we just put a colon in front and give that variable a name that makes sense, like ':id'
  Then we can put anything in there and it will call this method

  We can do the same thing in our 'base path' in the @Controller('report/:type')
  SO then we should be able to make requests to both localhost:3000/report/income AND localhost:3000/report/expense...
   or localhost:3000/report/ANYTHING?! But we will add error handling to fix that later, thankfully!
 ----------------------

 Now we want to also add the paths for POST, PUT, & DELETE.  They will need their own decorators, 3 guesses what those are.

 Then we created a collection in Postman to test our app b/c we can only do GET requests from our browser & we need a tool
 like postman to do the other operations. We created that collection, and have covered the basics of what our
 controller classes will be doing (with this app and others). Our functions aren't really doing anything yet though...
 SO--Next we will add the actual functionality to our app!!
 @ 50:11 of video
 To do this we need some kind of DB to store our values/reports

@1:33---  we have all our endpoints and the logic;
WE also have a few problems-- we have all our logic in the controller, which should really only be
creating the endpoints, not bogged down by all this business logic;
We also have no form of data validation so people could supply gargabe data;

So to resolve our contoller having all the logic, we will move the logic to a 'service' file--
app.service.ts in this case;

@1.42 -- we need to instantiate our Service class, and use modules to manage that stuff in our directory!

@1.46 -- at this point, it seems a little uneccesary to have the module and service etc, but when we have a real
project there can be MANY controllers, and using the modules really helps manage all those files;

Now @1.46 we want to do the same for our other methods;

